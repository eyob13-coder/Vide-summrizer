/* tslint:disable */
/* eslint-disable */
/**
*/
export function start(): void;
/**
*/
export enum Task {
  Transcribe = 0,
  Translate = 1,
}
/**
*/
export class DecodingOptionsBuilder {
  free(): void;
/**
*/
  constructor();
/**
* @param {Task} task
* @returns {DecodingOptionsBuilder}
*/
  setTask(task: Task): DecodingOptionsBuilder;
/**
* @param {string} language
* @returns {DecodingOptionsBuilder}
*/
  setLanguage(language: string): DecodingOptionsBuilder;
/**
* @param {number} temperature
* @returns {DecodingOptionsBuilder}
*/
  setTemperature(temperature: number): DecodingOptionsBuilder;
/**
* @param {number} sample_len
* @returns {DecodingOptionsBuilder}
*/
  setSampleLen(sample_len: number): DecodingOptionsBuilder;
/**
* @param {number} best_of
* @returns {DecodingOptionsBuilder}
*/
  setBestOf(best_of: number): DecodingOptionsBuilder;
/**
* @param {number} beam_size
* @returns {DecodingOptionsBuilder}
*/
  setBeamSize(beam_size: number): DecodingOptionsBuilder;
/**
* @param {number} patience
* @returns {DecodingOptionsBuilder}
*/
  setPatience(patience: number): DecodingOptionsBuilder;
/**
* @param {number} length_penalty
* @returns {DecodingOptionsBuilder}
*/
  setLengthPenalty(length_penalty: number): DecodingOptionsBuilder;
/**
* @param {string} prompt
* @returns {DecodingOptionsBuilder}
*/
  setPrompt(prompt: string): DecodingOptionsBuilder;
/**
* @param {string} prefix
* @returns {DecodingOptionsBuilder}
*/
  setPrefix(prefix: string): DecodingOptionsBuilder;
/**
* @param {Int32Array} suppress_tokens
* @returns {DecodingOptionsBuilder}
*/
  setSuppressTokens(suppress_tokens: Int32Array): DecodingOptionsBuilder;
/**
* @param {boolean} suppress_blank
* @returns {DecodingOptionsBuilder}
*/
  setSuppressBlank(suppress_blank: boolean): DecodingOptionsBuilder;
/**
* @param {boolean} without_timestamps
* @returns {DecodingOptionsBuilder}
*/
  setWithoutTimestamps(without_timestamps: boolean): DecodingOptionsBuilder;
/**
* @param {number} max_initial_timestamp
* @returns {DecodingOptionsBuilder}
*/
  setMaxInitialTimestamp(max_initial_timestamp: number): DecodingOptionsBuilder;
/**
* @param {number} time_offset
* @returns {DecodingOptionsBuilder}
*/
  setTimeOffset(time_offset: number): DecodingOptionsBuilder;
/**
* @returns {any}
*/
  build(): any;
}
/**
*/
export class Segment {
  free(): void;
/**
*/
  last: boolean;
/**
*/
  start: number;
/**
*/
  stop: number;
/**
*/
  text: string;
}
/**
*/
export class Session {
  free(): void;
/**
* @param {Uint8Array} audio
* @param {any} options
* @returns {Promise<any>}
*/
  run(audio: Uint8Array, options: any): Promise<any>;
/**
* @param {Uint8Array} audio
* @param {boolean} raw_audio
* @param {any} options
* @param {Function} js_callback
* @returns {Promise<void>}
*/
  stream(audio: Uint8Array, raw_audio: boolean, options: any, js_callback: Function): Promise<void>;
}
/**
*/
export class SessionBuilder {
  free(): void;
/**
*/
  constructor();
/**
* @param {Uint8Array} tokenizer_bytes
* @returns {SessionBuilder}
*/
  setTokenizer(tokenizer_bytes: Uint8Array): SessionBuilder;
/**
* @param {Uint8Array} model_file
* @returns {SessionBuilder}
*/
  setModel(model_file: Uint8Array): SessionBuilder;
/**
* @returns {Promise<Session>}
*/
  build(): Promise<Session>;
}
/**
*/
export class SessionError {
  free(): void;
/**
* @param {string} message
* @returns {SessionError}
*/
  static new(message: string): SessionError;
/**
* @returns {string}
*/
  toString(): string;
}

export type InitInput = RequestInfo | URL | Response | BufferSource | WebAssembly.Module;

export interface InitOutput {
  readonly memory: WebAssembly.Memory;
  readonly __wbg_sessionbuilder_free: (a: number) => void;
  readonly sessionbuilder_new: () => number;
  readonly sessionbuilder_setTokenizer: (a: number, b: number, c: number) => number;
  readonly sessionbuilder_setModel: (a: number, b: number, c: number) => number;
  readonly sessionbuilder_build: (a: number) => number;
  readonly __wbg_session_free: (a: number) => void;
  readonly session_run: (a: number, b: number, c: number, d: number) => number;
  readonly session_stream: (a: number, b: number, c: number, d: number, e: number, f: number) => number;
  readonly __wbg_sessionerror_free: (a: number) => void;
  readonly sessionerror_new: (a: number, b: number) => number;
  readonly sessionerror_toString: (a: number, b: number) => void;
  readonly start: () => void;
  readonly wgpu_render_bundle_set_bind_group: (a: number, b: number, c: number, d: number, e: number) => void;
  readonly wgpu_render_bundle_set_pipeline: (a: number, b: number) => void;
  readonly wgpu_render_bundle_set_vertex_buffer: (a: number, b: number, c: number, d: number, e: number) => void;
  readonly wgpu_render_bundle_set_index_buffer: (a: number, b: number, c: number, d: number, e: number) => void;
  readonly wgpu_render_bundle_set_push_constants: (a: number, b: number, c: number, d: number, e: number) => void;
  readonly wgpu_render_bundle_draw: (a: number, b: number, c: number, d: number, e: number) => void;
  readonly wgpu_render_bundle_draw_indexed: (a: number, b: number, c: number, d: number, e: number, f: number) => void;
  readonly wgpu_render_bundle_draw_indirect: (a: number, b: number, c: number) => void;
  readonly wgpu_render_bundle_draw_indexed_indirect: (a: number, b: number, c: number) => void;
  readonly wgpu_render_bundle_pop_debug_group: (a: number) => void;
  readonly wgpu_render_bundle_insert_debug_marker: (a: number, b: number) => void;
  readonly wgpu_compute_pass_set_bind_group: (a: number, b: number, c: number, d: number, e: number) => void;
  readonly wgpu_compute_pass_set_pipeline: (a: number, b: number) => void;
  readonly wgpu_compute_pass_set_push_constant: (a: number, b: number, c: number, d: number) => void;
  readonly wgpu_compute_pass_dispatch_workgroups: (a: number, b: number, c: number, d: number) => void;
  readonly wgpu_compute_pass_dispatch_workgroups_indirect: (a: number, b: number, c: number) => void;
  readonly wgpu_compute_pass_push_debug_group: (a: number, b: number, c: number) => void;
  readonly wgpu_compute_pass_pop_debug_group: (a: number) => void;
  readonly wgpu_compute_pass_insert_debug_marker: (a: number, b: number, c: number) => void;
  readonly wgpu_compute_pass_write_timestamp: (a: number, b: number, c: number) => void;
  readonly wgpu_compute_pass_begin_pipeline_statistics_query: (a: number, b: number, c: number) => void;
  readonly wgpu_compute_pass_end_pipeline_statistics_query: (a: number) => void;
  readonly wgpu_render_pass_set_bind_group: (a: number, b: number, c: number, d: number, e: number) => void;
  readonly wgpu_render_pass_set_pipeline: (a: number, b: number) => void;
  readonly wgpu_render_pass_set_vertex_buffer: (a: number, b: number, c: number, d: number, e: number) => void;
  readonly wgpu_render_pass_set_index_buffer: (a: number, b: number, c: number, d: number, e: number) => void;
  readonly wgpu_render_pass_set_blend_constant: (a: number, b: number) => void;
  readonly wgpu_render_pass_set_stencil_reference: (a: number, b: number) => void;
  readonly wgpu_render_pass_set_viewport: (a: number, b: number, c: number, d: number, e: number, f: number, g: number) => void;
  readonly wgpu_render_pass_set_scissor_rect: (a: number, b: number, c: number, d: number, e: number) => void;
  readonly wgpu_render_pass_set_push_constants: (a: number, b: number, c: number, d: number, e: number) => void;
  readonly wgpu_render_pass_draw: (a: number, b: number, c: number, d: number, e: number) => void;
  readonly wgpu_render_pass_draw_indexed: (a: number, b: number, c: number, d: number, e: number, f: number) => void;
  readonly wgpu_render_pass_draw_indirect: (a: number, b: number, c: number) => void;
  readonly wgpu_render_pass_draw_indexed_indirect: (a: number, b: number, c: number) => void;
  readonly wgpu_render_pass_multi_draw_indirect: (a: number, b: number, c: number, d: number) => void;
  readonly wgpu_render_pass_multi_draw_indexed_indirect: (a: number, b: number, c: number, d: number) => void;
  readonly wgpu_render_pass_multi_draw_indirect_count: (a: number, b: number, c: number, d: number, e: number, f: number) => void;
  readonly wgpu_render_pass_multi_draw_indexed_indirect_count: (a: number, b: number, c: number, d: number, e: number, f: number) => void;
  readonly wgpu_render_pass_push_debug_group: (a: number, b: number, c: number) => void;
  readonly wgpu_render_pass_pop_debug_group: (a: number) => void;
  readonly wgpu_render_pass_insert_debug_marker: (a: number, b: number, c: number) => void;
  readonly wgpu_render_pass_write_timestamp: (a: number, b: number, c: number) => void;
  readonly wgpu_render_pass_begin_occlusion_query: (a: number, b: number) => void;
  readonly wgpu_render_pass_end_occlusion_query: (a: number) => void;
  readonly wgpu_render_pass_begin_pipeline_statistics_query: (a: number, b: number, c: number) => void;
  readonly wgpu_render_pass_end_pipeline_statistics_query: (a: number) => void;
  readonly wgpu_render_pass_execute_bundles: (a: number, b: number, c: number) => void;
  readonly __wbg_decodingoptionsbuilder_free: (a: number) => void;
  readonly decodingoptionsbuilder_new: () => number;
  readonly decodingoptionsbuilder_setTask: (a: number, b: number) => number;
  readonly decodingoptionsbuilder_setLanguage: (a: number, b: number, c: number) => number;
  readonly decodingoptionsbuilder_setTemperature: (a: number, b: number) => number;
  readonly decodingoptionsbuilder_setSampleLen: (a: number, b: number) => number;
  readonly decodingoptionsbuilder_setBestOf: (a: number, b: number) => number;
  readonly decodingoptionsbuilder_setBeamSize: (a: number, b: number) => number;
  readonly decodingoptionsbuilder_setPatience: (a: number, b: number) => number;
  readonly decodingoptionsbuilder_setLengthPenalty: (a: number, b: number) => number;
  readonly decodingoptionsbuilder_setPrompt: (a: number, b: number, c: number) => number;
  readonly decodingoptionsbuilder_setPrefix: (a: number, b: number, c: number) => number;
  readonly decodingoptionsbuilder_setSuppressTokens: (a: number, b: number, c: number) => number;
  readonly decodingoptionsbuilder_setSuppressBlank: (a: number, b: number) => number;
  readonly decodingoptionsbuilder_setWithoutTimestamps: (a: number, b: number) => number;
  readonly decodingoptionsbuilder_setMaxInitialTimestamp: (a: number, b: number) => number;
  readonly decodingoptionsbuilder_setTimeOffset: (a: number, b: number) => number;
  readonly decodingoptionsbuilder_build: (a: number) => number;
  readonly __wbg_segment_free: (a: number) => void;
  readonly __wbg_get_segment_start: (a: number) => number;
  readonly __wbg_set_segment_start: (a: number, b: number) => void;
  readonly __wbg_get_segment_stop: (a: number) => number;
  readonly __wbg_set_segment_stop: (a: number, b: number) => void;
  readonly __wbg_get_segment_text: (a: number, b: number) => void;
  readonly __wbg_set_segment_text: (a: number, b: number, c: number) => void;
  readonly __wbg_get_segment_last: (a: number) => number;
  readonly __wbg_set_segment_last: (a: number, b: number) => void;
  readonly wgpu_render_bundle_push_debug_group: (a: number, b: number) => void;
  readonly streamsegment_start: (a: number) => number;
  readonly streamsegment_stop: (a: number) => number;
  readonly streamsegment_text: (a: number, b: number) => void;
  readonly streamsegment_last: (a: number) => number;
  readonly __wbindgen_export_0: (a: number, b: number) => number;
  readonly __wbindgen_export_1: (a: number, b: number, c: number, d: number) => number;
  readonly __wbindgen_export_2: WebAssembly.Table;
  readonly __wbindgen_export_3: (a: number, b: number, c: number) => void;
  readonly __wbindgen_add_to_stack_pointer: (a: number) => number;
  readonly __wbindgen_export_4: (a: number, b: number, c: number) => void;
  readonly __wbindgen_export_5: (a: number) => void;
  readonly __wbindgen_export_6: (a: number, b: number, c: number, d: number) => void;
  readonly __wbindgen_start: () => void;
}

export type SyncInitInput = BufferSource | WebAssembly.Module;
/**
* Instantiates the given `module`, which can either be bytes or
* a precompiled `WebAssembly.Module`.
*
* @param {SyncInitInput} module
*
* @returns {InitOutput}
*/
export function initSync(module: SyncInitInput): InitOutput;

/**
* If `module_or_path` is {RequestInfo} or {URL}, makes a request and
* for everything else, calls `WebAssembly.instantiate` directly.
*
* @param {InitInput | Promise<InitInput>} module_or_path
*
* @returns {Promise<InitOutput>}
*/
export default function __wbg_init (module_or_path?: InitInput | Promise<InitInput>): Promise<InitOutput>;
